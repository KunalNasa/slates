// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  name          String?  @default("")  
  avatar        String?  @default("")
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  rooms         Room[]
  chat          Chat[]
  participants  Participants[]
}

model Room {
  id            Int       @id @default(autoincrement())
  slug          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  adminId       String
  admin         User      @relation(fields: [adminId], references: [id])


  participants  Participants[] 
  chat          Chat[]
}
// participants -> [ {userId, canRead, canWrite} ]
model Chat {
  id        Int       @id @default(autoincrement())
  message   String
  userId    String
  roomId    Int
  user      User      @relation(fields: [userId], references: [id])
  room      Room      @relation(fields: [roomId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Participants {
  id        Int       @id @default(autoincrement())
  canRead   Boolean
  canWrite  Boolean
  userId    String 
  roomId    Int

  user      User      @relation(fields: [userId], references: [id])
  room      Room      @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId]) // Ensures a user can only be in a room once
}